use Examination_Project

--STORED PROCEDURE TO INSERT THE COURSE THAT STUDENT ENTERED AND ENROLLDATE TAKE THREE PARAMETER CRS_ID , ST_ID , ENROLL_DATE
CREATE OR ALTER PROCEDURE SP_INSERT_STUD_COURSE  @CRS_ID INT , @ST_ID INT , @ENROLL_DATE DATE  
AS 
          IF NOT EXISTS (SELECT Crs_Id ,St_Id FROM Stud_Course WHERE Crs_Id=@CRS_ID AND St_Id=@ST_ID)
          BEGIN TRY 
		       INSERT INTO Stud_Course 
			   VALUES ( @CRS_ID , @ST_ID , @ENROLL_DATE)
			   SELECT 'INSERTION SUCCESSFULL'
		  END TRY
		  BEGIN CATCH
		       SELECT ERROR_MESSAGE()
		  END CATCH
		  ELSE
		       SELECT 'USED ST_ID OR CRS_ID'

------CALLING
EXECUTE SP_INSERT_STUD_COURSE 19,1 , '11-29-2024' 


--STORED PROCEDURE TO SELECT FROM STUD_COURSE TABLE BY CRS_ID OR ST_ID TAKE TWO PARAMETER COLNAME(CRS_ID, ST_ID) , VALUE
CREATE OR ALTER PROCEDURE SP_SELECT_STUD_COURSE @COLNAME NVARCHAR(MAX) , @VALUE INT 
AS
          IF EXISTS (SELECT Crs_Id , St_Id FROM Stud_Course  WHERE Crs_Id=@VALUE OR St_Id=@VALUE)
				  BEGIN TRY
				  DECLARE @SQL NVARCHAR(MAX)
				  SET @SQL='SELECT Crs_Id,St_Id,Enroll_Date FROM Stud_Course WHERE '+QUOTENAME(@COLNAME)+'= @VALUE' ;
				  EXECUTE SP_EXECUTESQL @SQL , N'@COLNAME NVARCHAR(MAX) , @VALUE INT',@COLNAME , @VALUE  
				  END TRY
				  BEGIN CATCH
						  SELECT ERROR_MESSAGE()
				  END CATCH
		  ELSE 
				  SELECT 'INVALID NUMBER'

------CALLING
EXECUTE SP_SELECT_STUD_COURSE 'CRS_ID',100



--STORED PROCEDURE TO update FROM STUD_COURSE TAKES FOUR PARAMETER COLUMN NAME (ST_ID , CRS_ID , ENROLL_DATE) , NEWVALUE , ST_ID ,CRS_ID
CREATE OR ALTER PROCEDURE SP_UPDATE_QUES_CHOICE @COL NVARCHAR(MAX) ,@VALUE NVARCHAR(MAX) ,@ST_ID INT , @CRS_ID INT
AS
          IF EXISTS (SELECT Crs_Id , St_Id FROM Stud_Course WHERE Crs_Id=@CRS_ID AND St_Id=@ST_ID)
				  BEGIN TRY
				      DECLARE @SQL NVARCHAR(MAX) 
					  SET @SQL = 'UPDATE Stud_Course SET ' + QUOTENAME(@COL) + ' =@VALUE WHERE Crs_Id =@CRS_ID AND St_Id =@ST_ID '
					  EXECUTE SP_EXECUTESQL @SQL ,N'@COL NVARCHAR(MAX) ,@VALUE NVARCHAR(MAX) ,@ST_ID INT , @CRS_ID INT' ,@COL, @VALUE ,@ST_ID,@CRS_ID
					  SELECT 'SUCCESSFUL UPDATED ROW'
				  END TRY
				  BEGIN CATCH
		              SELECT ERROR_MESSAGE()
				  END CATCH
		  ELSE 
				  SELECT 'INVALID QUESTION NUMBER'

------CALLING
EXECUTE SP_UPDATE_QUES_CHOICE ST_ID , 1 , 10 , 20



--STORED PROCEDURE TO DELETE FROM STUD_COURSE TABLE BY CRS_ID AND ST_ID TAKES TWO PARAMETER CRS_ID , ST_ID 
CREATE OR ALTER PROCEDURE SP_DELETE_STUD_COURSE @CRS_ID INT , @ST_ID INT
AS
          IF EXISTS (SELECT Crs_Id , St_Id FROM Stud_Course WHERE Crs_Id=@CRS_ID AND St_Id=@ST_ID)
				  BEGIN TRY
					  DELETE FROM Stud_Course 
					  WHERE Crs_Id=@CRS_ID AND St_Id=@ST_ID
					  SELECT 'DELETED'
				  END TRY
				  BEGIN CATCH
		              SELECT ERROR_MESSAGE()
				  END CATCH
		  ELSE 
				  SELECT 'INVALID  NUMBER'

------CALLING
EXECUTE SP_DELETE_STUD_COURSE 18 , 65















